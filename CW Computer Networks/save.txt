int executeCommitEfficientCommand()
{
	/* I start with version 1 to check its existence. */
	int nrVersions = 1;
	/* I generate directory names. */
	char *directoryPath = (char *)malloc(MAXFILENAMELENGTH * sizeof(char));
	char *directoryName = (char *)malloc(MAXFILENAMELENGTH * sizeof(char));
	sprintf(directoryName, "%d", nrVersions);
	strcpy(directoryPath, "./serverFiles/");
	strcat(directoryPath, directoryName);
	
	int c;

	/* Number until which version I reached with the commits. */
	while (1)
	{
		struct stat sb;
		/* I check if the directory exists */
		if (stat(directoryPath, &sb) == 0 && S_ISDIR(sb.st_mode))
		{
			/* It exists , so we move on to the next version. */
			nrVersions++;
			sprintf(directoryName, "%d", nrVersions);
			strcpy(directoryPath, "./serverFiles/");
			strcat(directoryPath, directoryName);
		}
		else
		{
			/* It doesn't exist, so we stop. */
			break;
		}
	}

	char *version = (char *)malloc(MAXVERSIONLENGTH * sizeof(char));
	sprintf(version, "%d", nrVersions);
	/* I bring the latest version of the files. */
	executeRevertEfficientCommand(version);

	if (0)
	{
		char c;
		/* I start reading the files sent by the client. */
		char *fileName = readFromFdWithTPP(client, key);
		/* I read the junk character that remains in the buffer. */
		if (read(client, &c, sizeof(char)) < 1)
		{
			printf("[server]Error reading junk character!\n");

			return 0;
		}
	}

	/* I generate the commitedFiles directory path. */
	char *filePath = (char *)malloc(MAXFILENAMELENGTH * sizeof(char));
	strcpy(filePath, "./serverFiles/commitedFiles/");
	/* I empty the commitedFiles directory */
	removeFilesFromDirectory(filePath);
	
	if (0)
	{
		/* How long do we have files to receive. */
		while (strcmp(fileName, "finished") != 0)
		{
			/* Build the file path. */
			strcpy(filePath, "./serverFiles/commitedFiles/");
			strcat(filePath, fileName);
			/* I receive the file at the indicated path. */
			if (receiveFile(client, filePath, key) == 0)
			{
				printf("Error receiving file!\n");

				return 0;
			}

			/* I read the junk character that remains in the buffer. */
			if (read(client, &c, sizeof(char)) < 1)
			{
				printf("[server]Error reading junk character!\n");

				return 0;
			}

			/* I am reading the following file name. */
			fileName = readFromFdWithTPP(client, key);
			if (read(client, &c, sizeof(char)) < 1)
			{
				printf("[server]Error reading junk character!\n");

				return 0;
			}
		}
	}

	/* Build the directory for the new commit version. */

	nrVersions = 1;
	sprintf(directoryName, "%d", nrVersions);
	/* Build the path of the commit directory. */
	strcpy(directoryPath, "./serverFiles/");
	strcat(directoryPath, directoryName);
	/* How long the directory creation failed */
	while (mkdir(directoryPath, 0700) == -1)
	{
		/* I move on to the next version. */
		nrVersions++;
		sprintf(directoryName, "%d", nrVersions);
		strcpy(directoryPath, "./serverFiles/");
		strcat(directoryPath, directoryName);
	}

	/* Helpful data structures for browsing files. */
	DIR *commitedFilesDirectory;
	struct dirent *inFile;
	/* Build the directory path that contains the files received from the client. */
	char *commitedFilesDirectoryPath = (char *)malloc(MAXFILENAMELENGTH * sizeof(char));
	strcpy(commitedFilesDirectoryPath, "./serverFiles/commitedFiles/");
	/* Open the directory containing the files received from the client. */
	if (NULL == (commitedFilesDirectory = opendir(commitedFilesDirectoryPath)))
	{
		printf("Failed to open the directory!\n");

		return 0;
	}
	/* Allocate space for the strings I will need. */
	char *filePath1 = (char *)malloc(MAXFILENAMELENGTH * sizeof(char));
	char *filePath2 = (char *)malloc(MAXFILENAMELENGTH * sizeof(char));
	char *diffFilePath = (char *)malloc(MAXFILENAMELENGTH * sizeof(char));
	

	/* Browse file by file from the commitedFiles directory. */
	while ((inFile = readdir(commitedFilesDirectory)))
	{
		if (!strcmp(inFile->d_name, "."))
			continue;
		if (!strcmp(inFile->d_name, ".."))
			continue;
		/* Build the appropriate file path. */
		/* filePath1: file in currentFiles */
		/* filePath2: file in commitedFiles */
		/* diffFilePath: file generated by diff */
		printf("Diffing file: %s\n", inFile->d_name);
		strcpy(filePath1, "./serverFiles/currentFiles/");
		strcpy(filePath2, "./serverFiles/commitedFiles/");
		strcpy(diffFilePath, directoryPath);
		strcat(diffFilePath, "/");
		strcat(diffFilePath, inFile->d_name);
		strcat(diffFilePath, ".diff");
		strcat(filePath1, inFile->d_name);
		strcat(filePath2, inFile->d_name);
		
		
		/* Check if the file exists. */
		if (0)
		{
			if (doesFileExist(filePath1) == 1)
			{
				printf("File %s exists!\n", filePath1);
			}
			else
			{
				printf("%s not exists\n", filePath1);
				/* Does not exist, so I diff on the file in uploadedFiles */
				char *uploadedFilesPath = (char *)malloc(MAXFILENAMELENGTH * sizeof(char));
				sprintf(uploadedFilesPath, "./serverFiles/uploadedFiles/%s", inFile->d_name);
				if (doesFileExist(uploadedFilesPath) == 1)
				{
					createDiffFile(uploadedFilesPath, filePath2, diffFilePath);
				}
				else
				{
					printf("The file %s was not uploaded and will not be tracked. \n", inFile->d_name);
				}
				/* Copy the file from commitedFiles to currentFiles. */
				copyFile(filePath2, currentFilesPath); // source, destination
				continue;
			}
			/* Create the differences file. */
			createDiffFile(filePath1, filePath2, diffFilePath);
			/* Copy the file from commitedFiles to currentFiles. */
			sprintf(currentFilesPath, "./serverFiles/currentFiles/%s", inFile->d_name);
			copyFile(filePath2, currentFilesPath); // source, destination
		}
		else
		{
			char *uploadedFilesPath = (char *)malloc(MAXFILENAMELENGTH * sizeof(char));
			sprintf(uploadedFilesPath, "./serverFiles/uploadedFiles/%s", inFile->d_name);
			createDiff(uploadedFilesPath ,currentFilesPath);
		}
	}

	/* I generate the message.txt file if the commit is accompanied by a message. */
	if (currentCommand.nrParameters > 0)
	{
		char *commitMessageFile = (char *)malloc(MAXFILENAMELENGTH * sizeof(char));
		sprintf(commitMessageFile, "%s/message.txt", directoryPath);
		FILE *out = fopen(commitMessageFile, "w");

		for (int i = 0; i < currentCommand.nrParameters; i++)
		{
			fprintf(out, "%s ", currentCommand.parameters[i]);
		}
		fclose(out);
	}

	/* Free memory. */
	free(directoryPath);
	free(directoryName);
	free(filePath);
	free(filePath1);
	free(filePath2);
	free(commitedFilesDirectoryPath);
	free(diffFilePath);
	free(currentFilesPath);

	return 1;
}

